name: Arm Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ arm32, arm64 ] 
    steps:
    - name: Checkout 
      uses: actions/checkout@v4
    
    - name: Enable Multi Arch Support
      run: |
        sudo rm -f /etc/apt/sources.list.d/*
        sudo tee /etc/apt/sources.list << EOL
        deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted
        deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted
        deb [arch=armhf,arm64] https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy main restricted
        deb [arch=armhf,arm64] https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-updates main restricted
        deb [arch=armhf,arm64] https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-security main restricted
        EOL
        sudo dpkg --add-architecture armhf
        sudo dpkg --add-architecture arm64

        for i in {1..5}; do
          sudo apt-get update -o Acquire::Retries=3 -o Acquire::http::Timeout=30 && break
          echo "APT update attempt $i failed, retrying in 10s..."
          sleep 10
          [ $i -eq 5 ] && exit 1
        done
        
        sudo apt-get install -y \
          ca-certificates \
          apt-transport-https \
          gnupg2 \
          net-tools
        sudo rm -rf /var/lib/apt/lists/*
        sudo apt-get clean
        sudo apt-get update --fix-missing

    - name: Install Core Dependencies
      run: |
        sudo aptitude install -y \
          libfreetype6:armhf \
          libfreetype-dev:armhf \
          libfreetype6:arm64 \
          libfreetype-dev:arm64 \

          zlib1g:arm64 \
          zlib1g-dev:arm64 \
          libpng16-16:armhf \
          libpng-dev:armhf \
          libpng16-16:arm64 \
          libpng-dev:arm64
        
    - name: Install ARM Freetype
      run: |
        if [ "${{ matrix.arch }}" = "arm32" ]; then
        sudo apt-get install -y \
          libfreetype6:armhf \
          libfreetype-dev:armhf \
          zlib1g:armhf \
          zlib1g-dev:armhf \
          zlib1g:arm64 \
          zlib1g-dev:arm64 \
          crossbuild-essential-armhf
        fi
        if [ "${{ matrix.arch }}" = "arm64" ]; then
        sudo apt-get install -y \
          libfreetype6:arm64 \
          libfreetype-dev:arm64 \
          zlib1g:arm64 \
          zlib1g-dev:arm64 \
          libpng16-16:arm64 \
          libpng-dev:arm64
          crossbuild-essential-arm64
        fi
    
    - name: Install ARM Toolchains and QEMU
      run: |
        sudo apt-get update
        if [ "${{ matrix.arch }}" = "arm32" ]; then
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf qemu-user-static
        fi
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-system-arm
        fi
    - name: Generate Toolchain cmake
      run : |
        if [ "${{ matrix.arch }}" = "arm32" ]; then
        cat << EOF > arm32-toolchain.cmake
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR arm)
          set(TOOLCHAIN_PREFIX arm-linux-gnueabihf)
          set(CMAKE_C_COMPILER \${TOOLCHAIN_PREFIX}-gcc)
          set(CMAKE_CXX_COMPILER \${TOOLCHAIN_PREFIX}-g++)
        EOF
        cat arm32-toolchain.cmake
        fi
        
        if [ "${{ matrix.arch }}" = "arm64" ]; then
        cat << EOF > arm64-toolchain.cmake
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR aarch64)
          set(TOOLCHAIN_PREFIX aarch64-linux-gnu)
          set(CMAKE_C_COMPILER \${TOOLCHAIN_PREFIX}-gcc)
          set(CMAKE_CXX_COMPILER \${TOOLCHAIN_PREFIX}-g++)
        EOF
        cat arm64-toolchain.cmake
        fi

    - name: Configure CMake
      run: |
        mkdir -p build-${{ matrix.arch }}
        cd build-${{ matrix.arch }}
        cmake -DCMAKE_TOOLCHAIN_FILE=../${{ matrix.arch }}-toolchain.cmake -DOPT_UNITTEST=ON ..

    - name: Build
      run: |
        cd build-${{ matrix.arch }}
        cmake --build . --parallel

    - name: Run Tests with QEMU
      run: |
        cd build-${{ matrix.arch }}
        if [ "${{ matrix.arch }}" = "arm32" ]; then
            qemu-arm-static -L /usr/arm-linux-gnueabihf ./build-${{ matrix.arch }}/unit_tests
        elif [ "${{ matrix.arch }}" = "arm64" ]; then
            qemu-system-aarch64 -machine virt -cpu cortex-a57 -nographic \
              -kernel ./build-${{ matrix.arch }}/unit_tests -append "run_tests"
        fi

    - name: Upload Test Reaults
      if: always()
      uses: actions/upload-artifact@v4.6.2
      with:
        name: test-snpashots-${{ matrix.arch }}
        path: |
          build-${{ matrix.arch }}/snapshots/
